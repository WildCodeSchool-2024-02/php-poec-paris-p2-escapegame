{% extends 'layout.html.twig' %}
{% block stylesheet %}
	<link rel="stylesheet" href="/assets/css/room.css"/>
{% endblock %}
{% block content %}
	<form method="post" action="challenges/type">
		<div id="zoom-zone"></div>
	</form>
	<main>
		<button id='myButton'>?</button>
		<p id="description" class='hidden'>{{ currentChallenge.description }}</p>
	</main>
{% endblock %}
{% block javascript %}
<script>

    function displayClueBasedOnChall() {
        const button = document.getElementById('myButton');
        button.addEventListener('click', () => {
        const textElement = document.getElementById("description");
        textElement.classList.toggle("hidden");
        button.classList.toggle('hidden');
        });
}

function addClassToZoomZone(classMap, challengeId) {
const zoomZone = document.getElementById('zoom-zone');
if (! zoomZone) {
console.error("Element with id 'zoom-zone' not found.");
return;
}

if (classMap[challengeId]) {
zoomZone.classList.add(classMap[challengeId].class);
} else {
console.error("Class not found for challengeId:", challengeId);
}
}

function addLinkToZoomZone(classMap, challengeId) {
const zoomZone = document.getElementById('zoom-zone');
if (! zoomZone) {
console.error("Element with id 'zoom-zone' not found.");
return;
}

if (classMap[challengeId]) {
const link = document.createElement('a');
link.href = classMap[challengeId].link;
link.style.display = 'block';

const clone = zoomZone.cloneNode(true);

zoomZone.innerHTML = '';

link.appendChild(clone);

zoomZone.appendChild(link);
} else {
console.error("Class not found for challengeId:", challengeId);
}
}

document.addEventListener('DOMContentLoaded', () => {
const zoomZone = document.getElementById('zoom-zone');
const url = new URL(window.location.href);
const params = new URLSearchParams(url.search);
let roomId = params.get("rid");
let challengeId = params.get("cid");
const paragraph = document.createElement('p');
const value = "Je crains que vous ne soyez un peu égaré, ici dans le silence d'une salle vide. Cependant, laissez-moi vous guider vers le chemin que vous avez précédemment emprunté avec succès. Continuez votre chemin vers cet endroit et que votre exploration se poursuive avec succès.";
paragraph.textContent = value;

roomId = roomId ? parseInt(roomId, 10) : null;
challengeId = challengeId ? parseInt(challengeId, 10) : null;

const body = document.getElementById('body');

switch (roomId) {
case 1: displayClueBasedOnChall();
break;
case 2: body.classList.add('image2');
displayClueBasedOnChall();
break;
case 3: body.classList.add('image3');
displayClueBasedOnChall();
if (challengeId === 9) {
zoomZone.classList.add('belphegor');
};
break;
default:
body.classList.add('error_img');
document.body.appendChild(paragraph);
const button = document.getElementById('myButton');
button.classList.toggle('hidden');
}
const classMap = {
1: {
class: "lobby-zoom-1",
link: "http://localhost:8000/challenges?id=1"
},
2: {
class: "lobby-zoom-2",
link: "http://localhost:8000/challenges?id=2"
},
3: {
class: "lobby-zoom-3",
link: "http://localhost:8000/challenges?id=3"
},
4: {
class: "gallery-zoom-4",
link: "http://localhost:8000/challenges?id=4"
},
5: {
class: "gallery-zoom-5",
link: "http://localhost:8000/challenges?id=5"
},
6: {
class: "gallery-zoom-6",
link: "http://localhost:8000/challenges?id=6"
},
7: {
class: "exhibition-zoom-7",
link: "http://localhost:8000/challenges?id=7"
},
8: {
class: "exhibition-zoom-8",
link: "http://localhost:8000/challenges?id=8"
},
9: {
class: "exhibition-zoom-9",
link: "http://localhost:8000/challenges?id=9"
}
};
addClassToZoomZone(classMap, challengeId);
addLinkToZoomZone(classMap, challengeId);

});
</script>
{% endblock %}
